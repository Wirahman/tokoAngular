{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport '@cds/core/icon/register.js';\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nclass CdsIconDirective {\n  constructor(elementRef) {\n    this.element = elementRef.nativeElement;\n  }\n\n  get shape() {\n    return this.element.shape;\n  }\n\n  set shape(value) {\n    this.element.shape = value;\n  }\n\n  get size() {\n    return this.element.size;\n  }\n\n  set size(value) {\n    this.element.size = value;\n  }\n\n  get direction() {\n    return this.element.direction;\n  }\n\n  set direction(value) {\n    this.element.direction = value;\n  }\n\n  get flip() {\n    return this.element.flip;\n  }\n\n  set flip(value) {\n    this.element.flip = value;\n  }\n\n  get solid() {\n    return this.element.solid;\n  }\n\n  set solid(value) {\n    this.element.solid = value === '' ? true : value;\n  }\n\n  get status() {\n    return this.element.status;\n  }\n\n  set status(value) {\n    this.element.status = value;\n  }\n\n  get inverse() {\n    return this.element.inverse;\n  }\n\n  set inverse(value) {\n    this.element.inverse = value === '' ? true : value;\n  }\n\n  get badge() {\n    return this.element.badge;\n  }\n\n  set badge(value) {\n    this.element.badge = value;\n  }\n\n}\n\nCdsIconDirective.ɵfac = function CdsIconDirective_Factory(t) {\n  return new (t || CdsIconDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdsIconDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdsIconDirective,\n  selectors: [[\"cds-icon\"]],\n  inputs: {\n    shape: \"shape\",\n    size: \"size\",\n    direction: \"direction\",\n    flip: \"flip\",\n    solid: \"solid\",\n    status: \"status\",\n    inverse: \"inverse\",\n    badge: \"badge\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdsIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'cds-icon'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    shape: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    direction: [{\n      type: Input\n    }],\n    flip: [{\n      type: Input\n    }],\n    solid: [{\n      type: Input\n    }],\n    status: [{\n      type: Input\n    }],\n    inverse: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }]\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass CdsIconModule {}\n\nCdsIconModule.ɵfac = function CdsIconModule_Factory(t) {\n  return new (t || CdsIconModule)();\n};\n\nCdsIconModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdsIconModule\n});\nCdsIconModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdsIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [CdsIconDirective],\n      exports: [CdsIconDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdsIconDirective, CdsIconModule };","map":{"version":3,"sources":["C:/Angular/toko/node_modules/@cds/angular/fesm2015/icon.mjs"],"names":["i0","Directive","Input","NgModule","CommonModule","CdsIconDirective","constructor","elementRef","element","nativeElement","shape","value","size","direction","flip","solid","status","inverse","badge","ɵfac","ElementRef","ɵdir","type","args","selector","CdsIconModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,QAA3B,QAA2C,eAA3C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,4BAAP;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKC,OAAL,GAAeD,UAAU,CAACE,aAA1B;AACH;;AACQ,MAALC,KAAK,GAAG;AACR,WAAO,KAAKF,OAAL,CAAaE,KAApB;AACH;;AACQ,MAALA,KAAK,CAACC,KAAD,EAAQ;AACb,SAAKH,OAAL,CAAaE,KAAb,GAAqBC,KAArB;AACH;;AAEO,MAAJC,IAAI,GAAG;AACP,WAAO,KAAKJ,OAAL,CAAaI,IAApB;AACH;;AACO,MAAJA,IAAI,CAACD,KAAD,EAAQ;AACZ,SAAKH,OAAL,CAAaI,IAAb,GAAoBD,KAApB;AACH;;AAEY,MAATE,SAAS,GAAG;AACZ,WAAO,KAAKL,OAAL,CAAaK,SAApB;AACH;;AACY,MAATA,SAAS,CAACF,KAAD,EAAQ;AACjB,SAAKH,OAAL,CAAaK,SAAb,GAAyBF,KAAzB;AACH;;AAEO,MAAJG,IAAI,GAAG;AACP,WAAO,KAAKN,OAAL,CAAaM,IAApB;AACH;;AACO,MAAJA,IAAI,CAACH,KAAD,EAAQ;AACZ,SAAKH,OAAL,CAAaM,IAAb,GAAoBH,KAApB;AACH;;AAEQ,MAALI,KAAK,GAAG;AACR,WAAO,KAAKP,OAAL,CAAaO,KAApB;AACH;;AACQ,MAALA,KAAK,CAACJ,KAAD,EAAQ;AACb,SAAKH,OAAL,CAAaO,KAAb,GAAqBJ,KAAK,KAAK,EAAV,GAAe,IAAf,GAAsBA,KAA3C;AACH;;AAES,MAANK,MAAM,GAAG;AACT,WAAO,KAAKR,OAAL,CAAaQ,MAApB;AACH;;AACS,MAANA,MAAM,CAACL,KAAD,EAAQ;AACd,SAAKH,OAAL,CAAaQ,MAAb,GAAsBL,KAAtB;AACH;;AAEU,MAAPM,OAAO,GAAG;AACV,WAAO,KAAKT,OAAL,CAAaS,OAApB;AACH;;AACU,MAAPA,OAAO,CAACN,KAAD,EAAQ;AACf,SAAKH,OAAL,CAAaS,OAAb,GAAuBN,KAAK,KAAK,EAAV,GAAe,IAAf,GAAsBA,KAA7C;AACH;;AAEQ,MAALO,KAAK,GAAG;AACR,WAAO,KAAKV,OAAL,CAAaU,KAApB;AACH;;AACQ,MAALA,KAAK,CAACP,KAAD,EAAQ;AACb,SAAKH,OAAL,CAAaU,KAAb,GAAqBP,KAArB;AACH;;AA1DkB;;AA6DvBN,gBAAgB,CAACc,IAAjB;AAAA,mBAA6Gd,gBAA7G,EAAmGL,EAAnG,mBAA+IA,EAAE,CAACoB,UAAlJ;AAAA;;AACAf,gBAAgB,CAACgB,IAAjB,kBADmGrB,EACnG;AAAA,QAAiGK,gBAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAFmGL,EAEnG,mBAA2FK,gBAA3F,EAAyH,CAAC;AAC9GiB,IAAAA,IAAI,EAAErB,SADwG;AAE9GsB,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAD;AAFwG,GAAD,CAAzH,EAG4B,YAAY;AAAE,WAAO,CAAC;AAAEF,MAAAA,IAAI,EAAEtB,EAAE,CAACoB;AAAX,KAAD,CAAP;AAAmC,GAH7E,EAG+F;AAAEV,IAAAA,KAAK,EAAE,CAAC;AACzFY,MAAAA,IAAI,EAAEpB;AADmF,KAAD,CAAT;AAE/EU,IAAAA,IAAI,EAAE,CAAC;AACPU,MAAAA,IAAI,EAAEpB;AADC,KAAD,CAFyE;AAI/EW,IAAAA,SAAS,EAAE,CAAC;AACZS,MAAAA,IAAI,EAAEpB;AADM,KAAD,CAJoE;AAM/EY,IAAAA,IAAI,EAAE,CAAC;AACPQ,MAAAA,IAAI,EAAEpB;AADC,KAAD,CANyE;AAQ/Ea,IAAAA,KAAK,EAAE,CAAC;AACRO,MAAAA,IAAI,EAAEpB;AADE,KAAD,CARwE;AAU/Ec,IAAAA,MAAM,EAAE,CAAC;AACTM,MAAAA,IAAI,EAAEpB;AADG,KAAD,CAVuE;AAY/Ee,IAAAA,OAAO,EAAE,CAAC;AACVK,MAAAA,IAAI,EAAEpB;AADI,KAAD,CAZsE;AAc/EgB,IAAAA,KAAK,EAAE,CAAC;AACRI,MAAAA,IAAI,EAAEpB;AADE,KAAD;AAdwE,GAH/F;AAAA;AAqBA;AACA;AACA;AACA;AACA;;;AACA,MAAMuB,aAAN,CAAoB;;AAEpBA,aAAa,CAACN,IAAd;AAAA,mBAA0GM,aAA1G;AAAA;;AACAA,aAAa,CAACC,IAAd,kBA/BmG1B,EA+BnG;AAAA,QAA2GyB;AAA3G;AACAA,aAAa,CAACE,IAAd,kBAhCmG3B,EAgCnG;AAAA,YAAoI,CAACI,YAAD,CAApI;AAAA;;AACA;AAAA,qDAjCmGJ,EAiCnG,mBAA2FyB,aAA3F,EAAsH,CAAC;AAC3GH,IAAAA,IAAI,EAAEnB,QADqG;AAE3GoB,IAAAA,IAAI,EAAE,CAAC;AACCK,MAAAA,OAAO,EAAE,CAACxB,YAAD,CADV;AAECyB,MAAAA,YAAY,EAAE,CACVxB,gBADU,CAFf;AAKCyB,MAAAA,OAAO,EAAE,CACLzB,gBADK;AALV,KAAD;AAFqG,GAAD,CAAtH;AAAA;AAaA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASA,gBAAT,EAA2BoB,aAA3B","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport '@cds/core/icon/register.js';\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass CdsIconDirective {\n    constructor(elementRef) {\n        this.element = elementRef.nativeElement;\n    }\n    get shape() {\n        return this.element.shape;\n    }\n    set shape(value) {\n        this.element.shape = value;\n    }\n    ;\n    get size() {\n        return this.element.size;\n    }\n    set size(value) {\n        this.element.size = value;\n    }\n    ;\n    get direction() {\n        return this.element.direction;\n    }\n    set direction(value) {\n        this.element.direction = value;\n    }\n    ;\n    get flip() {\n        return this.element.flip;\n    }\n    set flip(value) {\n        this.element.flip = value;\n    }\n    ;\n    get solid() {\n        return this.element.solid;\n    }\n    set solid(value) {\n        this.element.solid = value === '' ? true : value;\n    }\n    ;\n    get status() {\n        return this.element.status;\n    }\n    set status(value) {\n        this.element.status = value;\n    }\n    ;\n    get inverse() {\n        return this.element.inverse;\n    }\n    set inverse(value) {\n        this.element.inverse = value === '' ? true : value;\n    }\n    ;\n    get badge() {\n        return this.element.badge;\n    }\n    set badge(value) {\n        this.element.badge = value;\n    }\n    ;\n}\nCdsIconDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CdsIconDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdsIconDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.3\", type: CdsIconDirective, selector: \"cds-icon\", inputs: { shape: \"shape\", size: \"size\", direction: \"direction\", flip: \"flip\", solid: \"solid\", status: \"status\", inverse: \"inverse\", badge: \"badge\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CdsIconDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'cds-icon' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { shape: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }], flip: [{\n                type: Input\n            }], solid: [{\n                type: Input\n            }], status: [{\n                type: Input\n            }], inverse: [{\n                type: Input\n            }], badge: [{\n                type: Input\n            }] } });\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass CdsIconModule {\n}\nCdsIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CdsIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdsIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CdsIconModule, declarations: [CdsIconDirective], imports: [CommonModule], exports: [CdsIconDirective] });\nCdsIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CdsIconModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CdsIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [\n                        CdsIconDirective,\n                    ],\n                    exports: [\n                        CdsIconDirective,\n                    ],\n                }]\n        }] });\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdsIconDirective, CdsIconModule };\n"]},"metadata":{},"sourceType":"module"}